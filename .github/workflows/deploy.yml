name: Deploy
on:
  # TODO: Determine the best trigger for deployment later
  # For now, assume that the conda channel has been updated with a new, undeployed version of payu
  workflow_dispatch:
jobs:
  setup-deployment-env:
    name: Setup Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      deployment-environments: ${{ steps.get-deployment-environment.outputs.deployment-environments }}
    steps:
      - name: Checkout config
        uses: actions/checkout@v4

      - name: Get environments
        id: get-deployment-environment
        run: echo "deployment-environments=$(jq --compact-output '.environments' ./config/deployment-environment.json)" >> $GITHUB_OUTPUT

  pack:
    name: Pack Payu
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.payu.outputs.name }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Payu Version
        id: payu
        run: |
          VERSION=$(yq eval '.dependencies[] | select(contains("accessnri::payu")) | split("==") | .[1]' env.yml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=payu-$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1.7.0
        with:
          micromamba-version: '1.5.3-0'
          environment-file: env.yml
          environment-name: ${{ steps.payu.outputs.name }}
          generate-run-shell: true

      - name: Create Pack and Lockfile
        shell: micromamba-shell {0}
        run: |
          conda pack
          conda-lock lock --file env.yml --platform linux-64 --micromamba --lockfile ${{ steps.payu.outputs.name }}.conda-lock.yml

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.payu.outputs.name }}
          if-no-files-found: error
          path: |
            ${{ steps.payu.outputs.name }}.tar.gz
            ${{ steps.payu.outputs.name }}.conda-lock.yml

  deploy:
    runs-on: ubuntu-latest
    needs:
      - pack
      - setup-deployment-env
    strategy:
      fail-fast: false
      matrix:
        deployment-environment: ${{ fromJson(needs.setup-deployment-env.outputs.deployment-environments) }}
    environment: ${{ matrix.deployment-environment }}
    env:
      name: ${{ needs.pack.outputs.name }}
    steps:
      - uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.name }}

      - uses: access-nri/actions/.github/actions/setup-ssh@main
        id: ssh
        with:
          hosts: |
            ${{ secrets.HOST_DATA }}
            ${{ secrets.HOST }}
          private-key: ${{ secrets.SSH_KEY }}

      - name: Copy to ${{ matrix.deployment-environment }}
        run: |
          rsync -e 'ssh -i ${{ steps.ssh.outputs.private-key-path }}' \
            ${{ env.name }}.tar.gz \
            ${{ secrets.USER }}@${{ secrets.HOST_DATA }}:${{ vars.PACK_LOCATION }}

      - name: Deploy to ${{ matrix.deployment-environment }}
        run: |
          ssh ${{ secrets.USER }}@${{ secrets.HOST }} -i ${{ steps.ssh.outputs.private-key-path }} /bin/bash <<'EOT'
          ls ${{ vars.PACK_LOCATION }}
          EOT

      # Release stuff after